<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  VisualStudio
     Generated on:       30/05/2021 12:21
     Generated by:       Dakhama mehdi
    --------------------------------------------------------------------------------
    .DESCRIPTION
#>


#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#[void][Reflection.Assembly]::Load('AspNetMMCExt, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('AspNetMMCExt.resources, Version=2.0.0.0, Culture=fr, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)

#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#[void][reflection.assembly]::Load('AspNetMMCExt, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#[void][reflection.assembly]::Load('AspNetMMCExt.resources, Version=2.0.0.0, Culture=fr, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')
	#[void][reflection.assembly]::Load('AxInterop.MSTSCLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
	#[void][reflection.assembly]::Load('AxMSTSCLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
	#[void][reflection.assembly]::Load('MSTSCLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
	#[void][reflection.assembly]::Load('System.ServiceModel.Install, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define
	#----------------------------------------------
	try{
		[FolderBrowserModernDialog] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Reflection;

        namespace SAPIENTypes
        {
		    public class FolderBrowserModernDialog : System.Windows.Forms.CommonDialog
            {
                private System.Windows.Forms.OpenFileDialog fileDialog;
                public FolderBrowserModernDialog()
                {
                    fileDialog = new System.Windows.Forms.OpenFileDialog();
                    fileDialog.Filter = "Folders|\n";
                    fileDialog.AddExtension = false;
                    fileDialog.CheckFileExists = false;
                    fileDialog.DereferenceLinks = true;
                    fileDialog.Multiselect = false;
                    fileDialog.Title = "Select a folder";
                }

                public string Title
                {
                    get { return fileDialog.Title; }
                    set { fileDialog.Title = value; }
                }

                public string InitialDirectory
                {
                    get { return fileDialog.InitialDirectory; }
                    set { fileDialog.InitialDirectory = value; }
                }
                
                public string SelectedPath
                {
                    get { return fileDialog.FileName; }
                    set { fileDialog.FileName = value; }
                }

                object InvokeMethod(Type type, object obj, string method, object[] parameters)
                {
                    MethodInfo methInfo = type.GetMethod(method, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    return methInfo.Invoke(obj, parameters);
                }

                bool ShowOriginalBrowserDialog(IntPtr hwndOwner)
                {
                    using(FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog())
                    {
                        folderBrowserDialog.Description = this.Title;
                        folderBrowserDialog.SelectedPath = !string.IsNullOrEmpty(this.SelectedPath) ? this.SelectedPath : this.InitialDirectory;
                        folderBrowserDialog.ShowNewFolderButton = false;
                        if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                        {
                            fileDialog.FileName = folderBrowserDialog.SelectedPath;
                            return true;
                        }
                        return false;
                    }
                }

                protected override bool RunDialog(IntPtr hwndOwner)
                {
                    if (Environment.OSVersion.Version.Major >= 6)
                    {      
                        try
                        {
                            bool flag = false;
                            System.Reflection.Assembly assembly = Assembly.Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
                            Type typeIFileDialog = assembly.GetType("System.Windows.Forms.FileDialogNative").GetNestedType("IFileDialog", BindingFlags.NonPublic);
                            uint num = 0;
                            object dialog = InvokeMethod(fileDialog.GetType(), fileDialog, "CreateVistaDialog", null);
                            InvokeMethod(fileDialog.GetType(), fileDialog, "OnBeforeVistaDialog", new object[] { dialog });
                            uint options = (uint)InvokeMethod(typeof(System.Windows.Forms.FileDialog), fileDialog, "GetOptions", null) | (uint)0x20;
                            InvokeMethod(typeIFileDialog, dialog, "SetOptions", new object[] { options });
                            Type vistaDialogEventsType = assembly.GetType("System.Windows.Forms.FileDialog").GetNestedType("VistaDialogEvents", BindingFlags.NonPublic);
                            object pfde = Activator.CreateInstance(vistaDialogEventsType, fileDialog);
                            object[] parameters = new object[] { pfde, num };
                            InvokeMethod(typeIFileDialog, dialog, "Advise", parameters);
                            num = (uint)parameters[1];
                            try
                            {
                                int num2 = (int)InvokeMethod(typeIFileDialog, dialog, "Show", new object[] { hwndOwner });
                                flag = 0 == num2;
                            }
                            finally
                            {
                                InvokeMethod(typeIFileDialog, dialog, "Unadvise", new object[] { num });
                                GC.KeepAlive(pfde);
                            }
                            return flag;
                        }
                        catch
                        {
                            return ShowOriginalBrowserDialog(hwndOwner);
                        }
                    }
                    else
                        return ShowOriginalBrowserDialog(hwndOwner);
                }

                public override void Reset()
                {
                    fileDialog.Reset();
                }
            }
       }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$checkboxBootable = New-Object 'System.Windows.Forms.CheckBox'
	$buttonCreateISOFromFolder = New-Object 'System.Windows.Forms.Button'
	$textbox3 = New-Object 'System.Windows.Forms.TextBox'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$buttonOutput = New-Object 'System.Windows.Forms.Button'
	$buttonSourceFolder = New-Object 'System.Windows.Forms.Button'
	$folderbrowsermoderndialog1 = New-Object 'SAPIENTypes.FolderBrowserModernDialog'
	$savefiledialog1 = New-Object 'System.Windows.Forms.SaveFileDialog'
	$fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$exitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$languageToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$englishToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$frenshToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$MainForm_Load={
	#TODO: Initialize Form Controls here
		$richtextbox1.Text = "   Welcom to Easy-ISO " + "`r`n" + "`r`n" + "   This tool help you to create an ISO from folder, bootable or not" + "`r`n" + "`r`n" +  "   Copyright 2021 "
		
		$script:path = (Get-Location).path
		
	}
	
	
	$buttonSourceFolder_Click={
		#TODO: Place custom script here
		$folderbrowsermoderndialog1.ShowDialog()
		$path1 = $folderbrowsermoderndialog1.SelectedPath
		$textbox3.Text =  $folderbrowsermoderndialog1.SelectedPath
		$richtextbox1.Text = "Folder size    :     "    +   "{0:N2} GB" -f ((gci $path1 -Recurse | measure Length -s).sum / 1GB)
		
	}
	
	$textbox1_TextChanged={
		#TODO: Place custom script here
		
	}
	
	$buttonOutput_Click={
		#TODO: Place custom script here
		$savefiledialog1.FileName = 'win'
		$savefiledialog1.Filter = "Image ISO (*.ISO)|*.ISO"
		$result = $savefiledialog1.ShowDialog()
		$textbox2.Text = $savefiledialog1.FileName
		
		
	}
	
	$textbox2_TextChanged={
		#TODO: Place custom script here
		
	}
	
	$textbox3_TextChanged={
		#TODO: Place custom script here
		
	}
	
	$buttonCreateISOFromFolder_Click={
		#TODO: Place custom script here
		$var1 = $textbox3.Text
		$var2 = $textbox2.Text
		
			
			$string = $null
			$String = @("Please enter a value in source patch or output", "Your ISO is succeful Created", "Check Winrm service")
			
		
		$progressbaroverlay1.Increment(20)
		
		if (!$textbox3.text -or !$textbox2.Text)
		{
			[System.Windows.Forms.MessageBox]::Show($string[0], 'Easy-ISO')
		}
		
		else
		{
			if ($checkboxBootable.Checked -eq $true)
			{
				$process = Start-Process cmd -Argument "/c .\source\oscdimg.exe -m -o -u2 -udfver102 -bootdata:2#p0,e,b.\source\etfsboot.com#pEF,e,b.\source\efisys.bin $var1 $var2 " -PassThru -Wait
				
			}
			else
			{
				$process = Start-Process cmd -Argument "/c .\source\oscdimg.exe -n -d -m $var1 $var2 " -PassThru -Wait
				
			}
			if ($process.ExitCode -eq '1')
			{
				
				$richtextbox1.AppendText("`r`n" + "`r`n")
				$error = .\source\oscdimg.exe -m -o -u2 -udfver102 -bootdata:2#p0, e, b.\source\etfsboot.com#pEF, e, b.\source\efisys.bin $var1 $var2 | Out-String
				$richtextbox1.SelectionColor = 'red'
				$richtextbox1.AppendText($error)
			}
			else
			{
				$richtextbox1.AppendText("`r`n" + "`r`n")
				$richtextbox1.SelectionColor = 'Green'
				$richtextbox1.AppendText($string[1])
				}
		}
	}
	
	$richtextbox1_TextChanged={
		#TODO: Place custom script here
		
	}
	
	$savefiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
	}
	
	#region Control Helper Functions
	function Update-Chart
	{
	<#
		.SYNOPSIS
			This functions helps you plot points on a chart
		
		.DESCRIPTION
			Use the function to plot points on a chart or add more charts to a chart control
		
		.PARAMETER ChartControl
			The Chart Control you when to add points to
		
		.PARAMETER XPoints
			Set the X Axis Points. These can be strings or numerical values.
		
		.PARAMETER YPoints
			Set the Y Axis Points. These can be strings or numerical values.
		
		.PARAMETER XTitle
			Set the Title for the X Axis.
		
		.PARAMETER YTitle
			Set the Title for the Y Axis.
		
		.PARAMETER Title
			Set the Title for the chart.
		
		.PARAMETER ChartType
			Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum
		
		.PARAMETER SeriesIndex
			Set the settings of a particular Series and corresponding ChartArea
		
		.PARAMETER TitleIndex
			Set the settings of a particular Title
		
		.PARAMETER SeriesName
			Set the settings of a particular Series using its name and corresponding ChartArea.
			The Series will be created if not found.
			If SeriesIndex is set, it will replace the Series' name if the Series does not exist
		
		.PARAMETER Enable3D
			The chart will be rendered in 3D.
		
		.PARAMETER Disable3D
			The chart will be rendered in 2D.
		
		.PARAMETER AppendNew
			When this switch is used, a new ChartArea is added to Chart Control.
		
		.NOTES
			Additional information about the function.
		
	#>
		
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[ValidateNotNull()]
			[System.Windows.Forms.DataVisualization.Charting.Chart]
			$ChartControl,
			[Parameter(Mandatory = $true,
					   Position = 2)]
			[ValidateNotNull()]
			$XPoints,
			[Parameter(Mandatory = $true,
					   Position = 3)]
			$YPoints,
			[Parameter(Mandatory = $false,
					   Position = 4)]
			[string]
			$XTitle,
			[Parameter(Mandatory = $false,
					   Position = 5)]
			[string]
			$YTitle,
			[Parameter(Mandatory = $false,
					   Position = 6)]
			[string]
			$Title,
			[Parameter(Mandatory = $false,
					   Position = 7)]
			[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]
			$ChartType,
			[Parameter(Mandatory = $false,
					   Position = 8)]
			$SeriesIndex = '-1',
			[Parameter(Mandatory = $false,
					   Position = 9)]
			$TitleIndex = '0',
			[Parameter(Mandatory = $false)]
			[string]
			$SeriesName = $null,
			[switch]
			$Enable3D,
			[switch]
			$Disable3D,
			[switch]
			$AppendNew
		)
		
		$ChartAreaIndex = 0
		if ($AppendNew)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			$ChartArea = $ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			
			$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
			$Series = $ChartControl.Series.Add($name)
			$SeriesIndex = $ChartControl.Series.Count - 1
			
			$Series.ChartArea = $ChartArea.Name
			
			if ($Title)
			{
				$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
		}
		else
		{
			if ($ChartControl.ChartAreas.Count -eq 0)
			{
				$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
				[void]$ChartControl.ChartAreas.Add($name)
				$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			}
			
			if ($ChartControl.Series.Count -eq 0)
			{
				if (-not $SeriesName)
				{
					$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
				}
				
				$Series = $ChartControl.Series.Add($SeriesName)
				$SeriesIndex = $ChartControl.Series.Count - 1
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			elseif ($SeriesName)
			{
				$Series = $ChartControl.Series.FindByName($SeriesName)
				
				if ($null -eq $Series)
				{
					if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
					{
						$Series = $ChartControl.Series[$SeriesIndex]
						$Series.Name = $SeriesName
					}
					else
					{
						$Series = $ChartControl.Series.Add($SeriesName)
						$SeriesIndex = $ChartControl.Series.Count - 1
					}
					
					$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
				}
				else
				{
					$SeriesIndex = $ChartControl.Series.IndexOf($Series)
					$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
				}
			}
		}
		
		if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
		{
			$SeriesIndex = 0
		}
		
		$Series = $ChartControl.Series[$SeriesIndex]
		$Series.Points.Clear()
		$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
		
		if ($Enable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $true
		}
		elseif ($Disable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $false
		}
		
		if ($Title)
		{
			if ($ChartControl.Titles.Count -eq 0)
			{
				#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
			
			$ChartControl.Titles[$TitleIndex].Text = $Title
		}
		
		if ($ChartType)
		{
			$Series.ChartType = $ChartType
		}
		
		if ($XTitle)
		{
			$ChartArea.AxisX.Title = $XTitle
		}
		
		if ($YTitle)
		{
			$ChartArea.AxisY.Title = $YTitle
		}
		
		if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($XPoints)
			$XPoints = $array
		}
		
		if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($YPoints)
			$YPoints = $array
		}
		
		$Series.Points.DataBindXY($XPoints, $YPoints)
	}
	
	
	function Clear-Chart
	{
	<#
		.SYNOPSIS
			This function clears the contents of the chart
	
		.DESCRIPTION
			Use the function to remove contents from the chart control
	
		.PARAMETER  ChartControl
			The Chart Control to clear
	
		.PARAMETER  LeaveSingleChart
			Leaves the first chart and removes all others from the control
		

	#>
		Param (	
		[ValidateNotNull()]
		[Parameter(Position=1,Mandatory=$true)]
	  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
		,
		[Parameter(Position=2, Mandatory=$false)]
		[Switch]$LeaveSingleChart
		)
		
		$count = 0	
		if($LeaveSingleChart)
		{
			$count = 1
		}
		
		while($ChartControl.Series.Count -gt $count)
		{
			$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
		}
		
		while($ChartControl.ChartAreas.Count -gt $count)
		{
			$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
		}
		
		while($ChartControl.Titles.Count -gt $count)
		{
			$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
		}
		
		if($ChartControl.Series.Count -gt 0)
		{
			$ChartControl.Series[0].Points.Clear()
		}
	}
	#endregion
	
	$aboutToolStripMenuItem_Click={
		#TODO: Place custom script here
		[System.Windows.Forms.MessageBox]::Show("Developped By : Dakhama Mehdi`r`n`r`nContribution : Matthieu Souin `r`n`r`nVersion 1.0 `r`nRelease   05/2021`r`nMicrosoft Windows NT 10.0.17763`r`n", 'About Easy-ISO')
		
	}
	
	$exitToolStripMenuItem_Click={
		#TODO: Place custom script here
		$MainForm.Close()
	}
	
	$checkboxBootable_CheckedChanged={
		#TODO: Place custom script here
		
	}
	
	$menustrip1_ItemClicked=[System.Windows.Forms.ToolStripItemClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ToolStripItemClickedEventArgs]
		#TODO: Place custom script here
		
	}
	
	$frenshToolStripMenuItem_Click={
		#TODO: Place custom script here
		$englishToolStripMenuItem.Checked = $false
		$frenshToolStripMenuItem.Checked = $true
		$richtextbox1.Text = "   Bienvenu dans Easy-ISO " + "`r`n" + "`r`n" + "   Cet outil vous permet de créer un fichier ISO à partir d'un repertoire " + "`r`n" + "`r`n" + "   Copyright 05/2021 "
		$buttonCreateISOFromFolder.Text = "Générer ISO"
		$buttonOutput.Text = "Chemin de sortie"
		$buttonSourceFolder.Text = "Choisir la source"
		$aboutToolStripMenuItem.Text = "A propos"
		$fileToolStripMenuItem.Text = "Fichier"
		$exitToolStripMenuItem.Text = "Quitter"
	}
	
	$englishToolStripMenuItem_Click={
		#TODO: Place custom script here
		$frenshToolStripMenuItem.Checked = $false
		$englishToolStripMenuItem.Checked = $true
		[System.Windows.Forms.MessageBox]::Show("Pls Restart Tool", 'B&B-ISO')
	}
	
	$fileToolStripMenuItem_Click={
		#TODO: Place custom script here
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_richtextbox1 = $richtextbox1.Text
		$script:MainForm_checkboxBootable = $checkboxBootable.Checked
		$script:MainForm_textbox3 = $textbox3.Text
		$script:MainForm_textbox2 = $textbox2.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$menustrip1.remove_ItemClicked($menustrip1_ItemClicked)
			$richtextbox1.remove_TextChanged($richtextbox1_TextChanged)
			$checkboxBootable.remove_CheckedChanged($checkboxBootable_CheckedChanged)
			$buttonCreateISOFromFolder.remove_Click($buttonCreateISOFromFolder_Click)
			$textbox3.remove_TextChanged($textbox3_TextChanged)
			$textbox2.remove_TextChanged($textbox2_TextChanged)
			$buttonOutput.remove_Click($buttonOutput_Click)
			$buttonSourceFolder.remove_Click($buttonSourceFolder_Click)
			$MainForm.remove_Load($MainForm_Load)
			$savefiledialog1.remove_FileOk($savefiledialog1_FileOk)
			$fileToolStripMenuItem.remove_Click($fileToolStripMenuItem_Click)
			$exitToolStripMenuItem.remove_Click($exitToolStripMenuItem_Click)
			$aboutToolStripMenuItem.remove_Click($aboutToolStripMenuItem_Click)
			$englishToolStripMenuItem.remove_Click($englishToolStripMenuItem_Click)
			$frenshToolStripMenuItem.remove_Click($frenshToolStripMenuItem_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$menustrip1.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($menustrip1)
	$MainForm.Controls.Add($richtextbox1)
	$MainForm.Controls.Add($checkboxBootable)
	$MainForm.Controls.Add($buttonCreateISOFromFolder)
	$MainForm.Controls.Add($textbox3)
	$MainForm.Controls.Add($textbox2)
	$MainForm.Controls.Add($buttonOutput)
	$MainForm.Controls.Add($buttonSourceFolder)
	$MainForm.AutoScaleDimensions = '6, 13'
	$MainForm.AutoScaleMode = 'Font'
	$MainForm.BackColor = 'SteelBlue'
	$MainForm.BackgroundImageLayout = 'Zoom'
	$MainForm.ClientSize = '369, 202'
	$MainForm.FormBorderStyle = 'Fixed3D'
	#region Binary Data
	
	#endregion
	$MainForm.MaximizeBox = $False
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'Easy-ISO  '
	$MainForm.add_Load($MainForm_Load)
	#
	# menustrip1
	#
	$menustrip1.BackColor = 'Transparent'
	[void]$menustrip1.Items.Add($fileToolStripMenuItem)
	[void]$menustrip1.Items.Add($aboutToolStripMenuItem)
	[void]$menustrip1.Items.Add($languageToolStripMenuItem)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Size = '369, 24'
	$menustrip1.TabIndex = 10
	$menustrip1.Text = 'menustrip1'
	$menustrip1.add_ItemClicked($menustrip1_ItemClicked)
	#
	# richtextbox1
	#
	$richtextbox1.AcceptsTab = $True
	$richtextbox1.Location = '12, 119'
	$richtextbox1.Name = 'richtextbox1'
	$richtextbox1.ReadOnly = $True
	$richtextbox1.Size = '350, 76'
	$richtextbox1.TabIndex = 9
	$richtextbox1.Text = ''
	$richtextbox1.add_TextChanged($richtextbox1_TextChanged)
	#
	# checkboxBootable
	#
	$checkboxBootable.BackColor = 'Transparent'
	$checkboxBootable.Checked = $True
	$checkboxBootable.CheckState = 'Checked'
	$checkboxBootable.Location = '163, 90'
	$checkboxBootable.Name = 'checkboxBootable'
	$checkboxBootable.Size = '83, 24'
	$checkboxBootable.TabIndex = 8
	$checkboxBootable.Text = 'Bootable'
	$checkboxBootable.UseCompatibleTextRendering = $True
	$checkboxBootable.UseVisualStyleBackColor = $False
	$checkboxBootable.add_CheckedChanged($checkboxBootable_CheckedChanged)
	#
	# buttonCreateISOFromFolder
	#
	$buttonCreateISOFromFolder.Location = '12, 90'
	$buttonCreateISOFromFolder.Name = 'buttonCreateISOFromFolder'
	$buttonCreateISOFromFolder.Size = '145, 23'
	$buttonCreateISOFromFolder.TabIndex = 7
	$buttonCreateISOFromFolder.Text = 'Create ISO From Folder'
	$buttonCreateISOFromFolder.UseCompatibleTextRendering = $True
	$buttonCreateISOFromFolder.UseVisualStyleBackColor = $True
	$buttonCreateISOFromFolder.add_Click($buttonCreateISOFromFolder_Click)
	#
	# textbox3
	#
	$textbox3.Location = '128, 30'
	$textbox3.Multiline = $True
	$textbox3.Name = 'textbox3'
	$textbox3.ReadOnly = $True
	$textbox3.Size = '234, 20'
	$textbox3.TabIndex = 6
	$textbox3.add_TextChanged($textbox3_TextChanged)
	#
	# textbox2
	#
	$textbox2.Location = '128, 61'
	$textbox2.Multiline = $True
	$textbox2.Name = 'textbox2'
	$textbox2.ReadOnly = $True
	$textbox2.Size = '234, 20'
	$textbox2.TabIndex = 5
	$textbox2.add_TextChanged($textbox2_TextChanged)
	#
	# buttonOutput
	#
	$buttonOutput.Location = '12, 61'
	$buttonOutput.Name = 'buttonOutput'
	$buttonOutput.Size = '98, 23'
	$buttonOutput.TabIndex = 4
	$buttonOutput.Text = 'Output'
	$buttonOutput.UseCompatibleTextRendering = $True
	$buttonOutput.UseVisualStyleBackColor = $True
	$buttonOutput.add_Click($buttonOutput_Click)
	#
	# buttonSourceFolder
	#
	$buttonSourceFolder.Location = '12, 27'
	$buttonSourceFolder.Name = 'buttonSourceFolder'
	$buttonSourceFolder.Size = '98, 23'
	$buttonSourceFolder.TabIndex = 2
	$buttonSourceFolder.Text = 'Source Folder'
	$buttonSourceFolder.UseCompatibleTextRendering = $True
	$buttonSourceFolder.UseVisualStyleBackColor = $True
	$buttonSourceFolder.add_Click($buttonSourceFolder_Click)
	#
	# folderbrowsermoderndialog1
	#
	#
	# savefiledialog1
	#
	$savefiledialog1.add_FileOk($savefiledialog1_FileOk)
	#
	# fileToolStripMenuItem
	#
	[void]$fileToolStripMenuItem.DropDownItems.Add($exitToolStripMenuItem)
	$fileToolStripMenuItem.Name = 'fileToolStripMenuItem'
	$fileToolStripMenuItem.Size = '37, 20'
	$fileToolStripMenuItem.Text = 'File'
	$fileToolStripMenuItem.add_Click($fileToolStripMenuItem_Click)
	#
	# exitToolStripMenuItem
	#
	$exitToolStripMenuItem.Name = 'exitToolStripMenuItem'
	$exitToolStripMenuItem.Size = '152, 22'
	$exitToolStripMenuItem.Text = 'Exit'
	$exitToolStripMenuItem.add_Click($exitToolStripMenuItem_Click)
	#
	# aboutToolStripMenuItem
	#
	$aboutToolStripMenuItem.Name = 'aboutToolStripMenuItem'
	$aboutToolStripMenuItem.Size = '52, 20'
	$aboutToolStripMenuItem.Text = 'About'
	$aboutToolStripMenuItem.add_Click($aboutToolStripMenuItem_Click)
	#
	# languageToolStripMenuItem
	#
	[void]$languageToolStripMenuItem.DropDownItems.Add($englishToolStripMenuItem)
	[void]$languageToolStripMenuItem.DropDownItems.Add($frenshToolStripMenuItem)
	$languageToolStripMenuItem.Name = 'languageToolStripMenuItem'
	$languageToolStripMenuItem.Size = '71, 20'
	$languageToolStripMenuItem.Text = 'Language'
	$languageToolStripMenuItem.Visible = $False
	#
	# englishToolStripMenuItem
	#
	$englishToolStripMenuItem.Checked = $True
	$englishToolStripMenuItem.CheckState = 'Checked'
	$englishToolStripMenuItem.Name = 'englishToolStripMenuItem'
	$englishToolStripMenuItem.Size = '112, 22'
	$englishToolStripMenuItem.Text = 'English'
	$englishToolStripMenuItem.add_Click($englishToolStripMenuItem_Click)
	#
	# frenshToolStripMenuItem
	#
	$frenshToolStripMenuItem.Name = 'frenshToolStripMenuItem'
	$frenshToolStripMenuItem.Size = '152, 22'
	$frenshToolStripMenuItem.Text = 'Frensh'
	$frenshToolStripMenuItem.add_Click($frenshToolStripMenuItem_Click)
	$menustrip1.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			#Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
